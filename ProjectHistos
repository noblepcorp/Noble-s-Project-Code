//Make Sure you leave out public class
import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.clas.physics.*;
import org.jlab.groot.ui.*;;
import org.jlab.groot.math.*;
import java.util.Random;
import javax.swing.JFrame;
import org.jlab.groot.graphics.EmbeddedCanvas;
import org.jlab.jnp.hipo4.data.Event;
import org.jlab.jnp.hipo4.data.Bank;


    public class Histo {

        HipoReader reader = new HipoReader(); // Create a reader obejct
        {
            reader.open("./Downloads/nSidis_006725.hipo");
        }
        Event     event = new Event();
        Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
        H1F  hW = new H1F("hW" ,100, 0.5, 4.0);
        H1F hQ2 = new H1F("hQ2",100, 0.1, 4.0);
        H1F hPi0 = new H1F("hPi0", 100, 0, 0.75);
        H1F hOmega = new H1F("hOmega", 100, 0, 2.0);
        H1F hOmegaCut = new H1F("hOmegaCut", 100, 0, 2.0);
        {
            hW.setTitleX("W [GeV]");
        }
        {
            hQ2.setTitleX("Q^2 [GeV/c^2]");
        }
        {
            hPi0.setTitleX("Mass [GeV]");
        }
        {
            hOmega.setTitleX("Mass [Omega]");
        }
        {
            hOmegaCut.setTitleX("Omega Mass Cut");
        }
    }

        TCanvas ec = new TCanvas("ec",800,400);
        LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
        LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
        LorentzVector electron = new LorentzVector();
        LorentzVector posPion = new LorentzVector();
        LorentzVector negPion = new LorentzVector();
        LorentzVector gamma = new LorentzVector();
        LorentzVector gamma2 = new LorentzVector();
        LorentzVector vPi0 = new LorentzVector();
        LorentzVector vOmega = new LorentzVector();
        LorentzVector       vW = new LorentzVector();
        LorentzVector      vQ2 = new LorentzVector();
        {
            reader.getEvent(event,0);
        }

                {
                while(reader.hasNext()==true){
                reader.nextEvent(event);
                event.read(particles);
                int events=0;
                int electronCount=0;
                int posPionCount=0;
                int negPionCount=0;
                int gammaCount=0;
                if(particles.getRows()>=5){
                events++;
                for(int row=0;row<particles.getRows();row++){
            int pid=particles.getInt("pid",row);
            if(pid==11){
            electron.setPxPyPzM(
            particles.getFloat("px",row),
            particles.getFloat("py",row),
            particles.getFloat("pz",row),
            0.0005);
            electronCount++;
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);

            vQ2.copy(vBeam);
            vQ2.sub(electron);

            hW.fill(vW.mass());//vPi0.fill and vPi0
            hQ2.fill(-vQ2.mass2());
            }
            //Do this with vPi0 within the filter code
            if(pid==22){
            if(gammaCount==0){
            gamma.setPxPyPzM(
            particles.getFloat("px",row),
            particles.getFloat("py",row),
            particles.getFloat("pz",row),
            0.0005);
            }else{
            gamma2.setPxPyPzM(
            particles.getFloat("px",row),
            particles.getFloat("py",row),
            particles.getFloat("pz",row),
            0.0005);
            }
            gammaCount++;
            }


            if(pid==211){
            posPion.setPxPyPzM(
            particles.getFloat("px",row),
            particles.getFloat("py",row),
            particles.getFloat("pz",row),
            0.0005);
            posPionCount++;
            }

            if(pid==-211){
            negPion.setPxPyPzM(
            particles.getFloat("px",row),
            particles.getFloat("py",row),
            particles.getFloat("pz",row),
            0.0005);
            negPionCount++;


            }
            if(electronCount>=1&&posPionCount>=1&&negPionCount>=1&&gammaCount>=2){
            vPi0.copy(gamma);
            vPi0.add(gamma2);
            hPi0.fill(vPi0.mass());

            vOmega.copy(posPion);
            vOmega.add(negPion);
            vOmega.add(vPi0);
            hOmega.fill(vOmega.mass());
            if(vPi0.mass() > .05 && vPi0.mass() < .2){
                hOmegaCut.fill(vOmega.mass());
            }
            }
            }

            }
            }
            }
            {
            {ec.divide(5,1);}
            {ec.cd(0).draw(hW);}
            {ec.cd(1).draw(hQ2);}
            {ec.cd(2).draw(hPi0);}
            {ec.cd(3).draw(hOmega);}
            {ec.cd(4).draw(hOmegaCut);}
            }
